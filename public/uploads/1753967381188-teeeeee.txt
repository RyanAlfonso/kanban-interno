// /src/app/api/todo/create/route.ts (versão final e limpa)

import { getAuthSession } from "@/lib/nextAuthOptions";
import prisma from "@/lib/prismadb"; // Importe o prisma com o middleware
import { TodoCreateValidator } from "@/lib/validators/todo";
import { getLogger } from "@/logger";
import { z } from "zod";

export async function POST(req: Request) {
  const logger = getLogger("info");
  try {
    const session = await getAuthSession();
    if (!session?.user) {
      return new Response("Unauthorized", { status: 401 });
    }

    const body = await req.json();

    // O 'deadline' aqui ainda é um número, e está tudo bem.
    const {
      title,
      description = "",
      columnId,
      deadline, // O middleware vai cuidar deste campo
      tags,
      assignedToIds,
      parentId,
      linkedCardIds,
    } = TodoCreateValidator.parse(body);

    const projectColumn = await prisma.projectColumn.findUnique({
      where: { id: columnId },
      select: { projectId: true },
    });

    if (!projectColumn) {
      return new Response("Project column not found", { status: 404 });
    }

    const order = await getNextOrderInColumn(columnId);

    // O objeto de dados agora é muito mais simples.
    // Você passa o `deadline` como um número diretamente.
    const createData = {
      title,
      description,
      column: { connect: { id: columnId } },
      project: { connect: { id: projectColumn.projectId } },
      tags,
      order,
      owner: { connect: { id: session.user.id } },
      assignedToIds,
      linkedCardIds,
      deadline, // <-- Passe o número diretamente. O middleware resolve.
      ...(parentId && { parent: { connect: { id: parentId } } }),
    };

    const result = await prisma.todo.create({
      data: createData,
      // seu 'include' permanece o mesmo
    });

    return new Response(JSON.stringify(result), { status: 201 });

  } catch (error) {
    logger.error({ error }, "Error creating todo");
    if (error instanceof z.ZodError) {
      return new Response(JSON.stringify(error.issues), { status: 400 });
    }
    return new Response("Internal Server Error", { status: 500 });
  }
}

// Função auxiliar para manter o código limpo
async function getNextOrderInColumn(columnId: string): Promise<number> {
  const lastTodo = await prisma.todo.findFirst({
    where: { columnId, isDeleted: false },
    orderBy: { order: "desc" },
  });
  return lastTodo ? lastTodo.order + 1 : 1;
}




"use client";

import useBackupState from "@/hooks/useBackupState";
import useClickOutSide from "@/hooks/useClickOutSide";
import useEsc from "@/hooks/useEsc";
import { cn } from "@/lib/utils";
import { Check, CircleX, X } from "lucide-react";
import {
  FC,
  KeyboardEvent,
  KeyboardEventHandler,
  useCallback,
  useEffect,
  useRef,
  useState,
} from "react";

// 1. Definir o tipo para as opções
type Option = {
  value: string;
  title: string;
};

type CustomizedMultSelectProps = {
  options?: Option[]; // ✅ Aceita um array de objetos
  value?: string[]; // ✅ O valor continua sendo um array de IDs (strings)
  onChange?: (value: string[]) => void;
  placeholder?: string;
};

const CustomizedMultSelect: FC<CustomizedMultSelectProps> = ({
  options = [],
  value = [],
  onChange,
  placeholder,
}) => {
  const [privateValue, setPrivateValue] = useState<string[]>(value);
  const {
    state: privateOptions,
    setState: setPrivateOptions,
    setBackupState: setPrivateOptionsBackup,
    backupState: privateOptionsBackup,
    reset: resetOptions,
  } = useBackupState({ initialState: options });
  
  const [open, setOpen] = useState(false);
  const [searchValue, setSearchValue] = useState<string>("");
  const selectorRef = useRef<HTMLDivElement>(null);
  const searchRef = useRef<HTMLInputElement>(null);

  const handleOnClose = useCallback(() => {
    setOpen(false);
    setSearchValue("");
    resetOptions();
  }, [resetOptions]);
  useClickOutSide(selectorRef, handleOnClose);
  useEsc(handleOnClose);

  useEffect(() => {
    if (!open || !searchRef.current) return;
    searchRef.current.focus();
  }, [open]);
  
  // Sincroniza o estado interno com as props externas
  useEffect(() => {
    setPrivateValue(value);
  }, [value]);

  useEffect(() => {
    setPrivateOptions(options);
    setPrivateOptionsBackup(options);
  }, [options, setPrivateOptions, setPrivateOptionsBackup]);


  const handleOpen = () => {
    setOpen((prev) => !prev);
  };

  const clearSelected = () => {
    setPrivateValue([]);
    if (onChange) onChange([]);
  };

  // 2. A lógica de seleção agora usa o 'value' da opção
  const onSelect = (optionValue: string) => {
    setSearchValue("");
    const newValue = privateValue.includes(optionValue)
      ? privateValue.filter((v) => v !== optionValue)
      : [...privateValue, optionValue];
    setPrivateValue(newValue);
    resetOptions();
    if (onChange) onChange(newValue);
  };

  const removeSelected = (e: React.MouseEvent, optionValue: string) => {
    e.stopPropagation();
    onSelect(optionValue);
  };
  
  // 3. A busca agora filtra pelo 'title' da opção
  const onSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setSearchValue(value);

    if (!value) {
      resetOptions();
      return;
    }

    const filteredOptions = privateOptionsBackup.filter((option) =>
      option.title.toLowerCase().includes(value.toLowerCase()),
    );
    setPrivateOptions(filteredOptions);
  };

  const handleInputOnKeyDown: KeyboardEventHandler<HTMLInputElement> = (e) => {
    e.stopPropagation();
    if (e.key === "Enter") {
        e.preventDefault();
        // Lógica para adicionar o primeiro item da busca se existir
        if (privateOptions.length > 0) {
            onSelect(privateOptions[0].value);
        }
    } else if (e.key === "Backspace" && searchValue.length === 0 && privateValue.length > 0) {
        e.preventDefault();
        const lastValue = privateValue[privateValue.length - 1];
        if (lastValue) {
            onSelect(lastValue);
        }
    } else if (e.key === "Escape") {
        handleOnClose();
    }
  };

  // 4. Função para encontrar o título correspondente a um ID
  const getTitleById = (id: string) => {
    return options.find(opt => opt.value === id)?.title || id;
  };

  return (
    <div className="relative text-sm text-left max-w-full">
      <div
        className="relative bg-background border rounded-lg"
        ref={selectorRef}
      >
        <div
          onClick={handleOpen}
          className="py-2 px-4 flex justify-between items-center cursor-pointer max-w-full"
        >
          <div className="flex flex-wrap justify-start max-w-full gap-1">
            {privateValue.length > 0 ? (
              // 5. Exibe os títulos dos IDs selecionados
              privateValue.map((id) => (
                <div
                  key={id}
                  className="inline-flex bg-slate-200 dark:bg-slate-800 max-w-[180px] items-center rounded-sm"
                >
                  <div className="overflow-hidden text-ellipsis whitespace-nowrap px-2 py-0.5">
                    {getTitleById(id)}
                  </div>
                  <div
                      className="w-5 h-5 cursor-pointer p-1 flex items-center justify-center hover:bg-rose-300 dark:hover:bg-rose-600"
                      onClick={(e) => removeSelected(e, id)}
                    >
                      <X className="w-3 h-3" />
                  </div>
                </div>
              ))
            ) : (
              !open && (
                <span className="text-muted-foreground">{placeholder}</span>
              )
            )}
            {open && (
              <div className="inline-flex grow min-w-[20px] max-w-full ml-1 overflow-hidden">
                <input
                  ref={searchRef}
                  onChange={onSearch}
                  value={searchValue}
                  className="w-full min-w-0 outline-none border-none bg-transparent"
                  onClick={(e) => e.stopPropagation()}
                  onKeyDown={handleInputOnKeyDown}
                />
              </div>
            )}
          </div>
          {privateValue.length > 0 && (
            <div>
              <CircleX className="w-4 h-4 ml-1 cursor-pointer" onClick={clearSelected} />
            </div>
          )}
        </div>
        {open && (
          <div className="absolute bg-white dark:bg-gray-800 my-1 w-full border rounded-md z-50 max-h-60 overflow-y-auto">
            {privateOptions.length > 0 ? privateOptions.map((option) => (
              // 6. A lista de opções agora usa 'option.value' e 'option.title'
              <div
                key={option.value}
                className={cn(
                  "py-2 px-4 cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-700 flex justify-between items-center",
                  privateValue.includes(option.value) && "bg-accent",
                )}
                onClick={() => onSelect(option.value)}
              >
                <div className="break-words">{option.title}</div>
                {privateValue.includes(option.value) && (
                  <Check className="w-4 h-4 ml-2" />
                )}
              </div>
            )) : (
              <div className="py-2 px-4 text-muted-foreground">Nenhum resultado.</div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default CustomizedMultSelect;



"use client";

import useBreakpoint from "@/hooks/useBreakpoint";
import { PREDEFINED_TAGS } from "@/lib/tags";
import { cn } from "@/lib/utils";
import { Project, Todo, User } from "@prisma/client";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@radix-ui/react-popover";
import { AxiosError } from "axios";
import dayjs from "dayjs";
import { CalendarIcon, X } from "lucide-react";
import { FC, lazy } from "react";
import { Controller, UseFormReturn } from "react-hook-form";
import { UseMutationResult, useQuery } from "@tanstack/react-query";
import "react-quill/dist/quill.snow.css";
import CustomizedMultSelect from "./CustomizedMultSelect";
import CustomizedSelect from "./CustomizedSelect";
import { Button } from "./ui/button";
import { Calendar } from "./ui/calendar";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Input } from "./ui/input";
import { Label } from "./ui/label";
import { useToast } from "./ui/use-toast";

type TaskEditFormProps = {
  handleOnClose: () => void;
  task: Partial<Todo> & { assignedToIds?: string[]; linkedCardIds?: string[] };
  title: string;
  enableDelete?: boolean;
  deleteMutationFunctionReturn?: UseMutationResult<Todo[], AxiosError, { id: string }, any>;
  editMutationFunctionReturn: UseMutationResult<Todo | Todo[], AxiosError, any, any>;
  formFunctionReturn: UseFormReturn<any>;
};

const CustomizedReactQuill = lazy(() => import("./CustomizedReactQuill"));

type ErrorMessageProps = {
  msg?: string;
};

const TaskModificationForm: FC<TaskEditFormProps> = ({
  handleOnClose,
  task,
  title,
  enableDelete,
  deleteMutationFunctionReturn,
  editMutationFunctionReturn,
  formFunctionReturn,
}) => {
  const { md } = useBreakpoint();
  useToast();
  const {
    handleSubmit,
    register,
    formState: { errors },
    control,
  } = formFunctionReturn;

  const { mutate: submitEditTodoTask, isPending: isEditLoading } = editMutationFunctionReturn;
  const { mutate: deleteFunc, isPending: isDeleteLoading } =
    deleteMutationFunctionReturn ?? { mutate: () => {}, isPending: false };

  const tagOptions = [...PREDEFINED_TAGS];

  const { data: projects, isLoading: projectsLoading, error: projectsError } = useQuery<Project[], Error>({
    queryKey: ["projects"],
    queryFn: async () => {
        const response = await fetch("/api/projects");
        if (!response.ok) throw new Error("Falha ao buscar áreas");
        return response.json();
    }
  });

  const { data: users, isLoading: usersLoading, error: usersError } = useQuery<User[], Error>({
    queryKey: ["users"],
    queryFn: async () => {
        const response = await fetch("/api/users");
        if (!response.ok) throw new Error("Falha ao buscar usuários");
        return response.json();
    }
  });

  const { data: todos, isLoading: todosLoading, error: todosError } = useQuery<Todo[], Error>({
    queryKey: ["todos"],
    queryFn: async () => {
        const response = await fetch("/api/todo");
        if (!response.ok) throw new Error("Falha ao buscar cards");
        return response.json();
    }
  });

  const projectOptions = projects?.map(project => ({
    value: project.id,
    title: project.name,
  })) || [];

  const userOptions = users?.map(user => ({
    value: user.id,
    title: user.name || user.email || "Usuário sem nome",
  })) || [];

  const todoOptions = todos?.filter(t => t.id !== task.id).map(todo => ({
    value: todo.id,
    title: todo.title,
  })) || [];

  const ErrorMessage = ({ msg }: ErrorMessageProps) => {
    return msg ? <span className="text-red-500 text-xs">{msg}</span> : null;
  };

  const ExtraInfoField = () => {
    return (
      <>
        <div className="relative grid gap-1 pb-4">
          <Label className="text-sm font-medium" htmlFor="projectId">
            Áreas
          </Label>
          <Controller
            control={control}
            name="projectId"
            defaultValue={task.projectId?.toString() || ""}
            render={({ field }) => (
              <CustomizedSelect
                options={projectOptions}
                placeholder="Selecione a área"
                onChange={field.onChange}
                value={field.value?.toString() || ""}
              />
            )}
          />
          {projectsError && <ErrorMessage msg="Erro ao carregar áreas." />}
          {!projectsLoading && projectOptions.length === 0 && <ErrorMessage msg="Nenhuma área disponível." />}
          <ErrorMessage msg={errors.projectId?.message?.toString()} />
        </div>

        <div className="relative grid gap-1 pb-4">
          <Label className="text-sm font-medium" htmlFor="assignedToIds">
            Usuários Responsáveis
          </Label>
          <Controller
            control={control}
            name="assignedToIds"
            defaultValue={task.assignedToIds || []}
            render={({ field }) => (
              <CustomizedMultSelect
                value={field.value || []}
                onChange={field.onChange}
                placeholder="Selecione usuários responsáveis"
                options={userOptions}
              />
            )}
          />
          {usersError && <ErrorMessage msg="Erro ao carregar usuários." />}
          {!usersLoading && userOptions.length === 0 && <ErrorMessage msg="Nenhum usuário disponível." />}
          <ErrorMessage msg={errors.assignedToIds?.message?.toString()} />
        </div>

        <div className="relative grid gap-1 pb-4">
          <Label className="text-sm font-medium" htmlFor="parentId">
            Card Pai (Hierárquico)
          </Label>
          <Controller
            control={control}
            name="parentId"
            defaultValue={task.parentId || ""}
            render={({ field }) => (
              <CustomizedSelect
                options={[{ value: "", title: "Nenhum" }, ...todoOptions]}
                placeholder="Selecione um card pai"
                onChange={field.onChange}
                value={field.value || ""}
              />
            )}
          />
          {todosError && <ErrorMessage msg="Erro ao carregar cards." />}
          <ErrorMessage msg={errors.parentId?.message?.toString()} />
        </div>

        <div className="relative grid gap-1 pb-4">
          <Label className="text-sm font-medium" htmlFor="linkedCardIds">
            Cards Relacionados (Irmãos)
          </Label>
          <Controller
            control={control}
            name="linkedCardIds"
            defaultValue={task.linkedCardIds || []}
            render={({ field }) => (
              <CustomizedMultSelect
                value={field.value || []}
                onChange={field.onChange}
                placeholder="Selecione cards relacionados"
                options={todoOptions}
              />
            )}
          />
          {todosError && <ErrorMessage msg="Erro ao carregar cards." />}
          <ErrorMessage msg={errors.linkedCardIds?.message?.toString()} />
        </div>

        <div className="relative grid gap-1 pb-4">
          <Label className="text-sm font-medium" htmlFor="deadline">
            Prazo
          </Label>
          <Controller
            control={control}
            name="deadline"
            defaultValue={task.deadline}
            render={({ field }) => (
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    variant={"outline"}
                    className={cn(
                      "justify-start text-left font-normal w-full h-9 px-3 py-2 text-sm",
                      !field.value && "text-muted-foreground"
                    )}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {field.value ? (
                      dayjs(field.value).format("YYYY-MM-DD")
                    ) : (
                      <span>Escolha uma data</span>
                    )}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0 bg-white dark:bg-gray-900 z-50 border rounded-md shadow-md">
                  <Calendar
                    mode="single"
                    selected={field.value ? new Date(field.value) : undefined}
                    onSelect={(date) => {
                      const timestamp = date instanceof Date ? date.getTime() : null;
                      field.onChange(timestamp);
                    }}
                    initialFocus
                  />
                </PopoverContent>
              </Popover>
            )}
          />
          <ErrorMessage msg={errors.deadline?.message?.toString()} />
        </div>

        <div className="relative grid gap-1 pb-4">
          <Label className="text-sm font-medium" htmlFor="tags">
            Tags
          </Label>
          <Controller
            control={control}
            name="tags"
            defaultValue={task.tags || []}
            render={({ field }) => (
              <CustomizedMultSelect
                value={field.value || []}
                onChange={field.onChange}
                placeholder="Selecione tags"
                options={tagOptions.map(tag => ({ value: tag, title: tag }))} // Ajuste para o formato esperado
              />
            )}
          />
          <ErrorMessage msg={errors.tags?.message?.toString()} />
        </div>
      </>
    );
  };

  return (
    <form
      onSubmit={handleSubmit((data) => {
        const payload = title === "Edit Task" && task.id ? { ...data, id: task.id } : data;
        submitEditTodoTask(payload);
      })}
    >
      <Card className="sm:max-h-[80vh] overflow-y-auto border-none shadow-none">
        <CardHeader className="p-4">
          <CardTitle className="flex justify-between items-center">
            <div className="text-lg font-semibold">{title}</div>
            <Button variant="ghost" size="icon" className="p-0 h-6 w-6" onClick={handleOnClose}>
              <X className="h-4 w-4" />
            </Button>
          </CardTitle>
        </CardHeader>
        <CardContent className="p-4">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="flex flex-col gap-4 flex-1">
              <div className="relative grid gap-1">
                <Label className="text-sm font-medium" htmlFor="title">
                  Título
                </Label>
                <Input
                  id="title"
                  className="w-full h-9 px-3 py-2 text-sm"
                  {...register("title")}
                />
                <ErrorMessage msg={errors.title?.message?.toString()} />
              </div>

              {!md && <ExtraInfoField />}

              <div className="relative grid gap-1 h-80">
                <Label className="text-sm font-medium" htmlFor="description">
                  Descrição
                </Label>
                <Controller
                  control={control}
                  name="description"
                  defaultValue={task.description || ""}
                  render={({ field }) => (
                    <CustomizedReactQuill
                      theme="snow"
                      value={field.value || ""}
                      onChange={field.onChange}
                      className="h-[calc(100%-1.75rem)]"
                    />
                  )}
                />
                <ErrorMessage msg={errors.description?.message?.toString()} />
              </div>
              <div className="relative flex gap-2 pt-4">
                <Button type="submit" isLoading={isEditLoading}>
                  {title === "Create Task" ? "Criar Tarefa" : "Salvar Alterações"}
                </Button>
                {enableDelete && deleteFunc && (
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => task.id && deleteFunc({ id: task.id })}
                    isLoading={isDeleteLoading}
                    disabled={!task.id || isDeleteLoading}
                  >
                    Excluir Tarefa
                  </Button>
                )}
              </div>
            </div>

            {md && (
              <div className="w-full md:w-64 flex flex-col border dark:border-gray-700 rounded-lg p-4 h-min space-y-4">
                <ExtraInfoField />
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </form>
  );
};

export default TaskModificationForm;




import { PrismaClient } from '@prisma/client';

// Declaração para garantir que prisma é um singleton em desenvolvimento
declare global {
  var prisma: PrismaClient | undefined;
}

// Usa 'globalThis.prisma' para consistência, se já estiver em uso
const client = globalThis.prisma || new PrismaClient();
if (process.env.NODE_ENV !== 'production') {
  globalThis.prisma = client;
}

// --- MIDDLEWARE PARA CONVERSÃO AUTOMÁTICA DE TIMESTAMP ---
client.$use(async (params, next) => {
  // Verifica se a operação é de criação, atualização ou "upsert" no modelo 'Todo'
  if (
    (params.action === 'create' || params.action === 'update' || params.action === 'upsert') &&
    params.model === 'Todo'
  ) {
    // Acessa os dados que estão sendo enviados
    const data = params.args.data;

    // Se o campo 'deadline' existir e for um número, ele será convertido
    if (data && typeof data.deadline === 'number') {
      // Converte o timestamp (número) para um objeto Date
      params.args.data.deadline = new Date(data.deadline);
    }
  }

  // Continua para a execução normal da operação do Prisma
  return next(params);
});

export default client;