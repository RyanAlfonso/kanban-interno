datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =====================================================================
// NOVO MODELO ADICIONADO
// =====================================================================
model Tag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  color     String
  projectId String   @db.ObjectId
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Relação Muitos-para-Muitos com o modelo Todo
  todos     Todo[]   @relation(fields: [todoIds], references: [id])
  todoIds   String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Garante que não haja tags com o mesmo nome no mesmo projeto
  @@unique([name, projectId])
}

model ProjectColumn {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  order     Int
  projectId String   @db.ObjectId
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  todos     Todo[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  movedFrom CardMovementHistory[] @relation("FromColumn")
  movedTo   CardMovementHistory[] @relation("ToColumn")

  @@unique([projectId, name])
  @@index([projectId, order])
}

model Project {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  columns     ProjectColumn[]
  todos       Todo[]

  // ALTERAÇÃO: Adicionada a relação inversa com o modelo Tag
  tags        Tag[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Todo {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String?
  label             String[]  @default([])
  deadline          DateTime?
  isDeleted         Boolean   @default(false)
  order             Int
  referenceDocument String?
  checklist         Json?

  // ALTERAÇÃO: O campo 'tags' agora é uma relação Muitos-para-Muitos
  tags              Tag[]     @relation(fields: [tagIds], references: [id])
  tagIds            String[]  @db.ObjectId

  ownerId           String    @db.ObjectId
  owner             User?     @relation(fields: [ownerId], references: [id])
  assignedToIds     String[]  @db.ObjectId
  projectId         String?   @db.ObjectId
  project           Project?  @relation(fields: [projectId], references: [id])
  columnId          String?   @db.ObjectId
  column            ProjectColumn? @relation(fields: [columnId], references: [id], onDelete: SetNull)

  movementHistory   CardMovementHistory[]

  parentId          String?   @db.ObjectId
  parent            Todo?     @relation("ChildTodos", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childTodos        Todo[]    @relation("ChildTodos")

  linkedCardIds     String[]  @db.ObjectId
  comments          Comment[]
  attachments       Attachment[]

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  todoId    String   @db.ObjectId
  todo      Todo     @relation(fields: [todoId], references: [id], onDelete: Cascade)
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  filename     String
  url          String
  todoId       String   @db.ObjectId
  todo         Todo     @relation(fields: [todoId], references: [id], onDelete: Cascade)
  uploadedById String   @db.ObjectId
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]

  todos         Todo[]
  comments      Comment[]
  attachments   Attachment[]
  cardMovements CardMovementHistory[]

  role          Role      @default(USER)
  type          UserType  @default(COLABORADOR)

  areas         Area[]    @relation(fields: [areaIds], references: [id])
  areaIds       String[]  @db.ObjectId

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum UserType {
  SERVIDOR
  COLABORADOR
}

model Area {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  users       User[]   @relation(fields: [userIds], references: [id])
  userIds     String[] @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CardMovementHistory {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  todoId       String        @db.ObjectId
  todo         Todo          @relation(fields: [todoId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  movedById    String        @db.ObjectId
  movedBy      User          @relation(fields: [movedById], references: [id])
  fromColumnId String        @db.ObjectId
  fromColumn   ProjectColumn @relation("FromColumn", fields: [fromColumnId], references: [id])
  toColumnId   String        @db.ObjectId
  toColumn     ProjectColumn @relation("ToColumn", fields: [toColumnId], references: [id])
  movedAt      DateTime      @default(now())

  @@index([todoId])
  @@index([movedById])
  @@index([fromColumnId])
  @@index([toColumnId])
}
